""" Use case queries for the kospex DB"""
import time
from sqlite_utils import Database
import kospex_utils as KospexUtils
import kospex_schema as KospexSchema
import requests

class KospexQuery:
    """kospex database query functionality"""

    def __init__(self, kospex_db=None):
        # Initialize the kospex environment
        KospexUtils.init()
        self.kospex_db = kospex_db or Database(KospexUtils.get_kospex_db_path())
        #
        #if kospex_db:
        #    self.kospex_db = kospex_db
        #else:
        #    self.kospex_db = Database(KospexUtils.get_kospex_db_path())

    def summary(self, days=None):
        """ Provide a summary of the known repositories."""
        summary_sql = """SELECT count(distinct(_repo_id)) 'repos', count(*) 'commits',
        count(distinct(author_email)) 'authors', count(distinct(committer_email)) 'committers'
        FROM commits"""
        params = []

        if days:
            from_date = KospexUtils.days_ago_iso_date(days)
            summary_sql += " WHERE committer_when > ?"
            params.append(from_date)

        #for row in self.kospex_db.query(summary_sql):
        #    print(row)
        data = next(self.kospex_db.query(summary_sql, params), None)
        return data

    def repo_summary(self, repo_id):
        """ Provide a summary of the known repositories."""
        summary_sql = """SELECT count(distinct(_repo_id)) 'repos', count(*) 'commits',
        count(distinct(author_email)) 'authors', count(distinct(committer_email)) 'committers'
        FROM commits
        WHERE _repo_id = ?
        """
        data = next(self.kospex_db.query(summary_sql, [repo_id]), None)
        return data

    def tech_landscape(self, repo_id=None):
        """ Calculate the technology landscape."""

        where_clause = ""
        params = []
        if repo_id:
            where_clause = "AND _repo_id = ?"
            params.append(repo_id)

        summary_sql = f"""SELECT Language, count(*) 'count', count(distinct(_repo_id)) 'repos'
        FROM file_metadata
        WHERE latest = 1 {where_clause}
        GROUP BY Language
        ORDER BY count DESC
        """

        data = []

        #if repo_id:
        #    for row in self.kospex_db.query(summary_sql, params):
        #        data.append(row)
        #else:
        for row in self.kospex_db.query(summary_sql, params):
            data.append(row)

        return data

    def repos_with_tech(self, tech):
        """ Find repos with the given technology."""

        summary_sql = """SELECT _repo_id, _git_server, _git_owner, _git_repo, count(*) 'count'
        FROM file_metadata
        WHERE Language = ?
        GROUP BY _repo_id
        ORDER BY count DESC
        """
        data = []

        for row in self.kospex_db.query(summary_sql, [tech]):
            data.append(row)

        return data

    def repos_by_author(self, author_email):
        """ Find repos for the given author_email."""

        summary_sql = """SELECT _repo_id, count(*) 'commits', MAX(committer_when) 'last_commit'
        FROM commits
        WHERE author_email = ?
        GROUP BY _repo_id
        ORDER BY commits     DESC
        """
        data = []

        for row in self.kospex_db.query(summary_sql, [author_email]):
            row['last_seen'] = KospexUtils.days_ago(row['last_commit'])
            data.append(row)

        return data

    def repos(self):
        """ Provide a summary of the known repositories."""
        summary_sql = """SELECT _repo_id, _git_server, _git_owner, _git_repo, count(*) 'commits',
        count(distinct(author_email)) 'authors', count(distinct(committer_email)) 'committers',
        MAX(committer_when) 'last_commit'
        FROM commits
        GROUP BY _repo_id
        ORDER BY _repo_id
        """
        data = []
        for row in self.kospex_db.query(summary_sql):
            data.append(row)

        for row in data:
            row['days_ago'] = KospexUtils.days_ago(row['last_commit'])

        return data

    def commits(self, repo_id=None, before=None, after=None, limit=None,
                hash=None, author_email=None, committer_email=None):
        """ Provide a summary of the known repositories."""
        summary_sql = """SELECT _repo_id, hash, author_when, author_name,
        author_email, committer_when, committer_name, committer_email, _files
        FROM commits
        WHERE 1=1
        """
        # TODO - this was generated by CoPilot, need to test it, but looks interesting
        params = []

        if repo_id:
            summary_sql += " AND _repo_id = ?"
            params.append(repo_id)

        if before:
            summary_sql += " AND committer_when < ?"
            params.append(before)

        if after:
            summary_sql += " AND committer_when > ?"
            params.append(after)

        if hash:
            summary_sql += " AND hash = ?"
            params.append(hash)

        if author_email:
            summary_sql += " AND author_email = ?"
            # TODO - space to + replacement is due to Github giving 123+gh-username@users...
            # Need to think of a more elegant solution
            params.append(author_email.replace(' ', '+'))

        if committer_email:
            summary_sql += " AND committer_email = ?"
            # TODO - space to + replacement is due to Github giving 123+gh-username@users...
            # Need to think of a more elegant solution
            params.append(committer_email.replace(' ', '+'))

        summary_sql += " ORDER BY committer_when DESC"

        if limit:
            summary_sql += " LIMIT ?"
            params.append(limit)

        data = []
        for row in self.kospex_db.query(summary_sql, params):
            data.append(row)

        return data

    def active_devs(self, days=90):
        """ Look for distinct developers in the last 'days' """
        from_date = KospexUtils.days_ago_iso_date(days)
        repos = {}
        summary_sql = """SELECT _repo_id, count(distinct(author_email)) 'devs'
        FROM commits
        WHERE committer_when > ?
        GROUP BY _repo_id
        """
        data = self.kospex_db.query(summary_sql, (from_date,))
        for row in data:
            repos[row['_repo_id']] = row['devs']

        return repos

    def active_developer_set(self, days=90):
        """ Look for distinct developers in the last 'days' """
        from_date = KospexUtils.days_ago_iso_date(days)
        devs = set()
        summary_sql = """SELECT distinct(author_email)
        FROM commits
        WHERE committer_when > ?
        """
        data = self.kospex_db.query(summary_sql, (from_date,))
        for row in data:
            devs.add(row['author_email'])

        return set(devs)

    def authors(self, days=None):
        """ Provide a summary of authors in the known repositories."""

        params = [] # parameters for the SQL query
        from_date = None

        if days:
            from_date = KospexUtils.days_ago_iso_date(days)

        authors = [] # list of authors from the sql query
        where_clause = ""

        if from_date:
            where_clause = "WHERE committer_when > ?"
            params.append(from_date)

        summary_sql = f"""SELECT distinct(author_email), count(*) 'commits',
        count(distinct(_repo_id)) 'repos', MAX(committer_when) 'last_commit'
        FROM commits
        {where_clause}
        GROUP BY author_email"""

        #summary_sql = """SELECT _repo_id, count(distinct(author_email)) 'devs'
        #FROM commits
        #WHERE committer_when > ?
        #GROUP BY _repo_id
        #"""
        data = self.kospex_db.query(summary_sql, params)
        for row in data:
            row['last_seen'] = KospexUtils.days_ago(row['last_commit'])
            authors.append(row)

        return authors

    def active_devs_by_repo(self, repo_id, days=90):
        """ Look for distinct developers in the last 'days' """
        from_date = KospexUtils.days_ago_iso_date(days)
        summary_sql = """SELECT distinct(author_email) 'author_email', count(*) 'commits',
        MAX(committer_when) 'last_commit'
        FROM commits
        WHERE committer_when > ? AND _repo_id = ?
        GROUP BY author_email
        ORDER BY commits DESC
        """
        results = []
        data = self.kospex_db.query(summary_sql, (from_date, repo_id))
        for row in data:
            row['days_ago'] = KospexUtils.days_ago(row['last_commit'])
            results.append(row)
        #return data[0]['devs']
        return results

    def authors_by_repo(self, repo_id):
        """ Provide a summary of authors in the provided repo."""
        summary_sql = """SELECT author_email, count(*) 'commits', MIN(author_when) 'first_commit',
        MAX(author_when) 'last_commit'
        FROM commits
        WHERE _repo_id = ?
        GROUP BY author_email
        ORDER BY commits DESC
        """
        data = self.kospex_db.query(summary_sql, [repo_id])
        results = {}

        for row in data:
            if row['last_commit']:
                row['days_ago'] = KospexUtils.days_ago(row['last_commit'])
            #row['days_ago'] = KospexUtils.days_ago(row['last_commit'])
            results[row['author_email']] = row

        return results

    def commit_ranges(self, repo_id=None):
        """ Get the range of commits for a repo """
        where_clause = ""
        params = []

        if repo_id:
            where_clause = "WHERE _repo_id = ?"
            params.append(repo_id)

        sql = f"""
        WITH DateCategories AS (
        SELECT
            CASE 
                WHEN julianday(committer_when) >= julianday('now') - 90 THEN 'active'
                WHEN julianday(committer_when) >= julianday('now') - 180 AND 
                julianday(committer_when) < julianday('now') - 90 THEN 'aging'
                ELSE 'older'
            END AS date_category
        FROM commits
        {where_clause}
        )

        SELECT date_category, COUNT(*) as row_count
        FROM DateCategories
        GROUP BY date_category;"""

        ages = {
            'active': 0,
            'aging': 0,
            'older': 0
        }
        data = self.kospex_db.query(sql, params)
        for row in data:
            ages[row['date_category']] = row['row_count']
        return ages

    def author_summary(self, repo_id):
        """ Provide a summary of authors for repositories."""
        summary_sql = """SELECT author_email, count(*) 'commits', MIN(author_when) 'first_commit',
        MAX(author_when) 'last_commit'
        FROM commits
        WHERE _repo_id = ?
        GROUP BY author_email
        ORDER BY commits DESC
        """
        data = self.kospex_db.query(summary_sql, [repo_id])
        results = []

        for row in data:
            if row['last_commit']:
                row['days_ago'] = KospexUtils.days_ago(row['last_commit'])
            #row['days_ago'] = KospexUtils.days_ago(row['last_commit'])
            results.append(row)

        return results

    def email_domains(self, repo_id=None):
        """ Provide a summary of email domains for repositories."""
        where_clause = ""
        params = []
        if repo_id:
            where_clause = " WHERE _repo_id = ? "
            params.append(repo_id)

        summary_sql = f"""SELECT substr(author_email, instr(author_email, '@') + 1) as domain,
        COUNT(DISTINCT author_email) 'addresses'
        FROM commits
        {where_clause}
        GROUP BY domain
        ORDER BY addresses DESC
        """
        data = self.kospex_db.query(summary_sql, params)
        results = []

        for row in data:
            results.append(row)

        return results

    def file_metadata(self, repo_id):
        """ Provide a summary of file metadata for repositories."""
        params = []
        params.append(repo_id)

        sql = """SELECT Location, filename, Lines, Complexity, Language
        FROM file_metadata
        WHERE _repo_id = ? AND latest = 1
        """
        metadata = {}
        data = self.kospex_db.query(sql, params)
        for row in data:
            metadata[row['Location']] = row
        print(metadata)
        return metadata

    def hotspots(self, repo_id):
        """ Provide hotspot analysis for a repo."""
        params = []
        params.append(repo_id)

        # We're going to need a few lookups
        # Potentially we could do this in a nasty join, but it's easier to read this way

        # We need the Lines of code per file as a proxy for complexity (scc gives us complexity too)
        # We'll get this as a dict so we can look up the file_path which will be Location in scc
        metadata = self.file_metadata(repo_id)

        # we need the number of distinct authors per file as well as the number of commits per file
        sql = """SELECT DISTINCT(file_path) as file_path, count(*) 'commits',
        COUNT(DISTINCT(c.author_email)) 'authors'
        FROM commit_files cf, commits c
        WHERE cf._repo_id = ? AND cf._repo_id = c._repo_id AND cf.hash = c.hash
        GROUP BY file_path
        ORDER BY commits DESC
        """
        data = self.kospex_db.query(sql, params)
        results = []

        for row in data:
            meta = metadata.get(row['file_path'], {})
            if meta:
                print(row['file_path'])
                row['Lines'] = meta.get('Lines',0)
                row['Complexity'] = meta.get('Complexity',0)
                row['Language'] = meta.get('Language',0)
                print(meta)
            else:
                print("No meta for ", row['file_path'])
            #row['lines'] = metadata[row['file_path']]['Lines']
            results.append(row)

        return results

    def url_request(self, url, cache=3600, timeout=10):
        """ Make a request to a URL, and use the cached version is less than [cache] seconds"""
        # Set default cache to 1 hour (60mins * 60secs)

        # Check the cache first
        cache_sql = f'''SELECT content, timestamp FROM {KospexSchema.TBL_URL_CACHE} WHERE url = ?'''
        data = self.kospex_db.query(cache_sql, (url,))
        result = next(data, None)

        if result and (time.time() - result['timestamp']) < cache:
            # Cache is valid
            content = result['content']
        else:
            # Fetch new content and update the cache
            try:
                response = requests.get(url, timeout=timeout)
                response.raise_for_status()  # Raise an exception for HTTP errors
                content = response.text

                # Insert or update the cache
                url_cache = {'url': url, 'content': content, 'timestamp': int(time.time())}
                self.kospex_db.table(KospexSchema.TBL_URL_CACHE).upsert(url_cache, pk=['url'])

            except requests.RequestException as e:
                print(f"Error fetching URL content: {e}")
                content = None

        return content

    def get_repo_ids(self):
        """return a list of repo_ids"""

        sql = """SELECT DISTINCT(_repo_id)
        FROM commits c
        """
        data = self.kospex_db.query(sql, [])
        results = []
        for row in data:
            results.append(row['_repo_id'])

        return results

    def author_tech(self, author_email=None, repo_id=None):
        """ Return the tech stack for an author """

        results = []
        params = []

        author_where = ""
        if author_email:
            params.append(author_email)
            author_where = "AND c.author_email = ?"

        repo_where = ""
        if repo_id:
            params.append(repo_id)
            repo_where = "AND c._repo_id = ?"

        # We're going to need a few lookups
        # Potentially we could do this in a nasty join, but it's easier to read this way

        # we need the number of distinct authors per file as well as the number of commits per file
        sql = f"""SELECT DISTINCT(author_email) as author_email, _ext, count(*) 'commits',
        MAX(author_when) 'last_commit', MIN(author_when) 'first_commit', 
        COUNT(DISTINCT(c._repo_id)) 'repos'
        FROM commit_files cf, commits c
        WHERE cf._repo_id = c._repo_id 
        AND cf.hash = c.hash {author_where} {repo_where}
        GROUP BY author_email, _ext
        ORDER BY commits DESC
        """

        data = self.kospex_db.query(sql, params)
        for row in data:
            row['last_seen'] = KospexUtils.days_ago(row['last_commit'])
            row['first_seen'] = KospexUtils.days_ago(row['first_commit'])
            row['days_active'] = int(row.get('first_seen',0)) - int(row.get('last_seen',0))
            results.append(row)

        return results
