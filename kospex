#!/usr/bin/env python3
"""This is the kospex command line tool."""
import os
import os.path
import logging
from datetime import datetime
from shutil import which
import click
from prettytable import PrettyTable
from kospex_core import Kospex, GitRepo
import kospex_utils as KospexUtils
from kospex_git import KospexGit
from kospex_query import KospexQuery
from kospex_dependencies import KospexDependencies

KospexUtils.init()
kospex = Kospex()
log = logging.getLogger(__name__)
#logging.basicConfig(filename='example.log', encoding='utf-8', level=logging.DEBUG)

@click.group()
def cli():
    """Kospex is a tool for assessing code and git repositories.
    
    It is designed to help understand the structure of code, who are developers and
    changes over time.

    For documentation on how commands run `kospex COMMAND --help`.
    
    """

@cli.command("init")
@click.option('--default', is_flag=True, default=False, help="Create the default ~/code directory.")
def kospex_init(default):
    """ Perform basic initial setup."""
    kospex_code = os.path.expanduser("~/code")
    kconf = KospexUtils.get_kospex_config()
    installed = which('scc')
    if not installed:
        print("Please install scc from https://github.com/boyter/scc")
        print("This is used to count lines of code, complexity and determine the language.")

    if default:
        if not os.path.exists(kospex_code):
            os.makedirs(kospex_code)
        else:
            print("Directory already exists.")
    else:
        if os.path.exists(kospex_code):
            print("~/code directory exists.")
            print("If you want to overide the code directory")
            print(f"edit the {kconf} file.")
        else:
            print("Directory does not exist.")
            print("Run with --default to create ~/code directory.")
            print(f"or edit the {kconf} file and change the KOSPEX_CODE.")


@cli.command("summary")
@click.option('-out', type=click.STRING,help="filename to write CSV results to.")
def summary(out):
    """ Provide a summary of all the known repositories."""
    kospex.summary(results_file=out)

@cli.command("sync")
@click.option('--no-scc', is_flag=True, default=False, help="Skip scc analysis.")
@click.argument('repo', type=GitRepo())
def sync(repo,no_scc):
    """Sync a single repo to the kospex DB, using the native git commands."""
    installed = which('scc')
    if not installed:
        print("Please install scc from https://github.com/boyter/scc")
        print("This is used to count lines of code, complexity and determine the language.")
        print("or run sync with --no-scc to skip this step.")
    kospex.sync_repo(repo, no_scc=no_scc)

#@cli.command("sync")
#@click.option('-previous', type=int, help='# Commits to sync from the oldest in kospex DB.')
#@click.argument('repo', type=GitRepo())
#def sync(repo, previous):
#    """Sync a single repo to the kospex DB.
#
#    Available switches:
#
#    -previous to get the previous N commits using the "-before" date
#
#    Future (not implemented yet) switches:
#
#    -before to specify the the commits before a date
#
#    -after to specify the the commits after a date
#
#    -hash to get all the commits after a hash
#
#    -before and -previous to get the previous N commits before a date
#
#    -next to get the next N commits after the "-after" date
#    """
#    params = {}
#   params['previous'] = previous
#    kospex.sync_repo(repo, **params)

@cli.command("sync-directory")
@click.argument('directory', type=click.Path(exists=True))
def sync_directory(directory):
    """Sync all Git repos found in the data directory to the kospex DB."""
    # Find all the repos in the directory
    repos = KospexUtils.find_repos(directory)
    for repo in repos:
        print(f"\nSyncing {repo}")
        kospex.sync_repo(repo)

@cli.command("developers")
@click.option('-repo', type=GitRepo(),
              help='Git repo directory to assess, confirm sync status')
@click.option('-days', type=int, default=90, help='Committed in the last X days.')
@click.option('-org_key', type=click.STRING, help='Format of SERVER~ORG')
@click.option('-repo_id', type=click.STRING)
@click.option('-out', type=click.Path(), help='filename to write CSV results to.')
# pylint: disable=unused-argument
def devs(repo, days, repo_id, org_key, out):
    """ Information Stats about developers."""
    params = locals()
    click.echo(f'Searching for active developers (last {days} days)')
    kospex.active_developers(**params)

@cli.command("list-repos")
@click.argument('directory', type=click.Path(exists=True))
def find_repos(directory):
    """List all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    kospex.list_repos(directory)

@cli.command("tech-landscape")
@click.option('-repo', type=GitRepo())
@click.option('-repo_id', type=click.STRING)
@click.option("-metadata", is_flag=True, default=False,
              help="Use file metadata, NOT Git committed filenames.")
# pylint: disable=unused-argument
def tech_landscape(repo, repo_id, metadata):
    """Show the tech landscape (file extensions or metadata)."""
    kwargs = locals()
    kospex.tech_landscape(**kwargs)

@cli.command("sync-metadata")
@click.option('-repo', type=GitRepo())
@click.option('-directory', type=click.Path(exists=True))
def sync_metadata(repo,directory):
    """Sync file metadata for either a 'repo' or 'directory' of repos. """
    #print(f"Finding repos in {directory}")
    if directory and repo:
        print("Please specify either a -repo or a -directory, not both.")
    elif directory:
        kospex.sync_metadata(directory)
    elif repo:
        kospex.file_metadata(repo)
    else:
        print("Please specify either a '-repo' or a '-directory'.")

@cli.command("hotspot")
@click.option('-repo', type=GitRepo())
@click.option('-repo_id', type=click.Path())
@click.option("-by_file", is_flag=True, default=False, help="Calculate hotspot per file.")
# pylint: disable=unused-argument
def hotspot(repo, repo_id, by_file):
    """Find hotspots in the given repo."""
    params = locals()
    print("WARNING: EXPERIMENTAL")
    if repo or repo_id:
        kospex.hotspot(**params)
    else:
        print("Please specify either a '-repo' or a '-repo_id'.")

@cli.command("deps")
@click.option('-repo', type=GitRepo())
@click.option('-file', type=click.Path(exists=True))
@click.option('-directory', type=click.Path(), help="Directory to search for dependency files.")
@click.option('-out', type=click.STRING, help="filename to write CSV results to.")
def deps(repo, file, directory, out):
    """Find dependency files or assess a specific file."""
    kquery = KospexQuery()
    kdeps = KospexDependencies(kospex_db=kospex.kospex_db, kospex_query=kquery)

    if directory:
        
        results = kdeps.find_dependency_files(directory)
        records = []

        if results:
        
            for file_path in results:
                commit_info = KospexUtils.get_last_commit_info(file_path)
                if commit_info:
                    records.append(commit_info)
        
            if records:
                table = KospexUtils.get_dependency_files_table(records)
                print(table)

            if out:
                KospexUtils.list_dict_2_csv(records,out)

            stats = KospexUtils.repo_stats(records,"author_date")
            print("\nSummary of dependency files found in the directory:")
            print(stats)
            print()

        else:
            print("No package/dependency manager files found.")

    elif repo:
        os.chdir(repo)
        results = kdeps.find_dependency_files(".")
        if results:
            for file_path, pkg_type in results:
                print(f"File: {file_path} | Type: {pkg_type}")
        else:
            print("No package/dependency manager files found.")

    elif file:
        file_path = os.path.abspath(file)
        repo_info = kospex.file_repo_details(file)
        repo_authors = 0
        if repo_info:
            results = kquery.authors_by_repo(repo_info['_repo_id'])
            if results:
                repo_authors = len(results)

        records = kdeps.assess(file_path, results_file=out, repo_info=repo_info,
                               print_table=True)
        total = len(records)
        count = 0
        author_count = 0
        for record in records:
            if 'versions_behind' in record and record['versions_behind'] > 2:
                count += 1
            if 'authors' in record:
                author_count += record['authors']

        if count and total:
            print(f"Total dependencies: {total} | Outdated(>2): {count}")
            print(f"Non Compliant: {count/total*100:.2f}%")
            print(f"Compliant: {(total-count)/total*100:.2f}%")
            print(f"# Dependency Authors: {author_count}")
            if repo_authors:
                print(f"# Repo Authors: {repo_authors}")
            print(f"Dependency:Repo Author Ratio: {(repo_authors/author_count)*100:.5f}%")
        else:
            print("No dependencies found.")

    else:
        print("Please specify either a '-repo', '-directory' or a '-file'.")

@cli.command("author-tech")
@click.option('-author_email', type=click.STRING)
@click.option('-repo_id', type=click.STRING)
# pylint: disable=unused-argument
def author_tech(author_email,repo_id):
    """Show the tech landscape for a given author."""
    kwargs = locals()
    print(kwargs)
    results = kospex.kospex_query.author_tech(**kwargs)
    table = kospex.author_tech_pretty_table(results)
    print(table)

@cli.command("key-person")
@click.option('-top', type=int, default=4, help='The number of top authors to assess.')
@click.argument('directory',  type=GitRepo())
def key_person(directory,top):
    """ Identify the key person for a repo."""
    kgit = KospexGit()
    kgit.set_repo(directory)
    kquery = KospexQuery()

    table = KospexUtils.key_person_prettytable()
    headers = table.field_names

    active = kquery.commit_stats(repo_id=kgit.get_repo_id(),days=90)
    active_dict = {d["author"]: d for d in active}
    key = "commits"
    total_active_commits = sum(item[key] for item in active if key in item)

    authors = kquery.commit_stats(repo_id=kgit.get_repo_id())
    key = "commits"
    total_commits = sum(item[key] for item in authors if key in item)
    print(f"total commits: {total_commits}")
    for a in authors:
        a['active_commits'] = active_dict.get(a['author'],{}).get('commits',0)
        a['% commits'] = f"{a['commits'] / total_commits * 100:.1f}%"
        # TODO - We only want to do this if we're printing the table, modify if we're dumping to CSV
        a['last_commit'] = KospexUtils.extract_db_date(a['last_commit'])
        a['first_commit'] = KospexUtils.extract_db_date(a['first_commit'])

        if total_active_commits > 0:
            a['% active'] = f"{a['active_commits'] / total_active_commits * 100:.1f}%"
        else:
            a['% active'] = "0%"

    authors_dict = {d["author"]: d for d in authors}

    for a in authors[:top]:
        #a['active_commits'] = active_dict.get(a['author'],{}).get('commits',0)
        table.add_row(KospexUtils.get_values_by_keys(a, headers))

    top_authors_dict = {d["author"]: d for d in authors[:top]}

    for a in active[:top]:
        a_dict = top_authors_dict.get(a['author'])
        if not a_dict:
            a_dict = authors_dict[a['author']]
            table.add_row(KospexUtils.get_values_by_keys(a_dict, headers))

    print()
    print(table)
    print()

# TODO - move this to deps, this is redundant but it's -directory will be broken now
#@cli.command("find-dependencies")
#@click.argument('directory',  type=click.Path())
#def find_deps(directory):
#    """ Find all the known dependency management files in a directory."""
#    print(f"Finding dependency management files in the directory: {directory}")
#    kdeps = KospexDependencies()
#    results = kdeps.find_dependency_files(directory)
    #for file_path, pkg_type in results:
    #    print(f"File: {file_path} | Type: {pkg_type}")
#    for file in results:
#        print(file)

@cli.command("orgs")
def orgs():
    """List all the organizations in the database."""
    kquery = KospexQuery()
    orgs_list = kquery.orgs()
    table = KospexUtils.orgs_prettytable()
    for o in orgs_list:
        table.add_row(KospexUtils.get_values_by_keys(o, table.field_names))
    print(table)

@cli.command("test")
def testy():
    """List all the organizations in the database."""
    print(kospex.git.extract_git_url_parts("https://go.googlesource.com/oauth2"))

@cli.command("sync-dependencies")
@click.option('-file', type=click.Path(exists=True))
@click.option('-repo', type=GitRepo())
def sync_dependencies(repo,file):
    """ Clone and sync the dependencies for a repo/dependency file."""
    kquery = KospexQuery()
    kdeps = KospexDependencies(kospex_db=kospex.kospex_db, kospex_query=kquery)

    if file or repo:
        # We need one of these
        if file:
            file_path = os.path.abspath(file)
            print(f"Syncing dependencies for file: {file}")
            repo_info = kospex.file_repo_details(file)
            records = kdeps.assess(file_path, repo_info=repo_info, print_table=True)
            for rec in records:
                print(f'About to clone and sync {rec["source_repo"]}')
                repo_path = kospex.git.clone_repo(rec["source_repo"])
                kospex.sync_repo(repo_path)

        if repo:
            print(f"Syncing dependencies for repo: {repo}")
            print("NOT IMPLEMENTED!")

    else:
        print("Please specify either a '-repo' or a '-file'.")

@cli.command("know")
@click.argument('email',  type=click.STRING)
def knol(email):
    """Show the tech landscape for a given author."""
    #results = kospex.kospex_query.author_tech(**kwargs)
    #for result in results:
    #    print(result)

    #    sql = f"""SELECT DISTINCT(author_email) as author_email, _ext, count(*) 'commits',
    #    MAX(author_when) 'last_commit', MIN(author_when) 'first_commit',
    #    COUNT(DISTINCT(c._repo_id)) 'repos'
    #    FROM commit_files cf, commits c
    #    WHERE cf._repo_id = c._repo_id
    #    AND cf.hash = c.hash {author_where} {repo_where}
    #    GROUP BY author_email, _ext
    #    ORDER BY commits DESC
    #    """
    #kd = KospexData()
    #kd.from_table("commits", "commit_files")
    #kd.select_as("DISTINCT(author_email)", "author_email")
    #kd.select("_ext")
    #kd.select_as("COUNT(*)", "commits")
    #kd.select_as("MAX(commits.committer_when)", "last_commit")
    #kd.select_as("MIN(commits.committer_when)", "first_commit")

    #kd.where("commits.author_email", "=", email)

    nowish = datetime.now().isoformat()
    print(nowish)
    last30 = KospexUtils.date_days_ago(nowish, 60)

    #kd.where("commits.committer_when", ">=", last30)
    #kd.where_join("commits", "_repo_id", "commit_files", "_repo_id")
    #kd.where_join("commits", "hash", "commit_files", "hash")

    #kd.where_join("commits", "hash", "dependency_data", "hash")
    #kd.where_join("commits", "_repo_id", "dependency_data", "_repo_id")

    #kd.group_by("_ext")
    #kd.order_by("commits", "DESC")
    kquery = KospexQuery()

    kd = kquery.tech_commits(author_email=email)
    kd.where("commits.committer_when", ">=", last30)

    print(kd.generate_sql(line=True))
    print(kd.get_bind_parameters())

    ar1 = {}
    ar2 = {}

    results = kospex.kospex_db.execute(kd.generate_sql(), kd.get_bind_parameters())
    for result in results:
        ar1[result[0]] = result[1]
        #print(result[0])
        print(result)

    print(ar1)

    kd2 = kquery.tech_commits(author_email=email)
    kd2.where("commits.committer_when", "<", last30)
    kd2_from = KospexUtils.date_days_ago(last30, 90)
    kd2.where("commits.committer_when", ">=", kd2_from)

    print("###")
    print(kd2.generate_sql(line=True))
    print(kd2.get_bind_parameters())

    results = kospex.kospex_db.execute(kd2.generate_sql(), kd2.get_bind_parameters())
    for result in results:
        ar2[result[0]] = result[1]
        print(result)

    ext_dif = KospexUtils.merge_dicts(ar1, ar2)
    print(ext_dif)

if __name__ == '__main__':
    cli()
