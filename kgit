#!/usr/bin/env python3
"""This is the kospex git CLI helper tool."""
import time
import os
import click
from kospex_core import GitRepo, Kospex
import kospex_utils as KospexUtils
from kospex_git import KospexGit

KospexUtils.init()
kgit = KospexGit()

@click.group()
def cli():
    """kgit (Kospex Git) is a utility for doing git things with kospex use cases.

    For documentation on how commands run `kgit COMMAND --help`.
    
    """

@cli.command("status")
#@click.option('-repo', type=GitRepo(), help="Git repository.")
#@click.argument('repo', type=click.Path(exists=True))
@click.argument('repo',  type=GitRepo())
# pylint: disable=unused-argument
def status(repo):
    """Date and commit metadata for the given repo."""
    print(repo)
    st = time.time()
    stats = KospexUtils.get_git_stats(repo, 30)
    for x in stats.keys():
        print(x + " => ", end="")
        print(stats[x])
    et = time.time()
    elapsed_time = et - st
    print('Execution time:', elapsed_time, 'seconds')

@cli.command("clone")
@click.option('-sync', is_flag=True)
@click.option('-repo',  type=click.STRING)
@click.option('-filename',  type=click.STRING)
def clone(repo, sync, filename):
    """Clone the given repo into our KOSPEX_CODE directory."""
    # We're going to shell out to git to do the clone
    kospex = Kospex()

    if repo and filename:
        exit("You can't specify both a repo and a filename. Please choose one.")

    if repo:
        repo_path = kgit.clone_repo(repo)
        if sync and repo_path:
            print("Syncing repo: " + repo_path)
            kospex.sync_repo(repo_path)

    elif filename:
        with open(filename, "r") as file:
            for line in file:
                repo = line.strip()
                if repo.startswith("#"):
                    print(f"\n\nSkipping commented line: {repo}\n\n")
                else:
                    repo_path = kgit.clone_repo(repo)
                    if not repo_path:
                        print(f"\n\nERROR with {repo}\n\n")

                    if sync and repo_path:
                        print("Syncing: " + repo)
                        kospex = Kospex()
                        kospex.sync_repo(repo_path)


if __name__ == '__main__':
    cli()
