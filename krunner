#!/usr/bin/env python3
"""This is the kospex runner tool - run the same command on all repos."""
import os
import os.path
import subprocess
import sys
import shlex
import json
import glob
import click
from kospex_core import Kospex
import kospex_utils as KospexUtils
import krunner_utils as KrunnerUtils
from kospex_dependencies import KospexDependencies

kospex = Kospex()

@click.group()
def cli():
    """krunner (Kospex Runner) is a utility for running shell commands on multiple git repos.

    For documentation on how commands run `krunner COMMAND --help`.
    
    """

@cli.command("find-docker")
#@click.option('--metadata', is_flag=True, default=False, help="Provide git metadata and last modified. ")
@click.option('-out', type=click.STRING, help="filename to write CSV results to.")
@click.argument('directory', type=click.Path(exists=True))
def find_docker(directory,out):
    """Find docker related files in the given directory."""

    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    files = KrunnerUtils.find_dockerfiles_in_repos(dirs)
    records = KospexUtils.get_git_metadata(files)

    table = KospexUtils.get_dependency_files_table(records)
    print(table)

    if out:
        KospexUtils.list_dict_2_csv(records,out)



@cli.command("list-repos")
@click.argument('directory', type=click.Path(exists=True))
def find_repos(directory):
    """List all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    kospex.list_repos(directory)

@cli.command("trufflehog")
@click.argument('directory', type=click.Path(exists=True))
def trufflehog(directory):
    """Run trufflehog on all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    cwd = os.getcwd()
    for d in dirs:
        print("\nRepo: " + d)
        kospex.set_repo_dir(d)
        fname = kospex.generate_krunner_filename(function="TRUFFLEHOG",ext="json")
        command = f"trufflehog filesystem -j . > {fname}"
        print(command)
        os.system(command)
        os.chdir(cwd)

@cli.command("grep")
@click.option('-keyword', type=click.STRING, help="String to search for.")
@click.argument('directory', type=click.Path(exists=True))
def grep(keyword, directory):
    """Run a 'grep' on all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    cwd = os.getcwd()
    print("# repos: " + str(len(dirs)))
    for d in dirs:
        print("\nRepo: " + d)
        os.chdir(d)
        os.system(f"grep -Rn {keyword} *")
        os.chdir(cwd)

@cli.command("todo")
@click.argument('directory', type=click.Path(exists=True))
def todo(directory):
    """Search for the keyword TODO in files in git repos."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    cwd = os.getcwd()
    print("# repos: " + str(len(dirs)))
    for d in dirs:
        print("\nRepo: " + d)
        #os.chdir(d)
        kospex.set_repo_dir(d)
        details = kospex.git.add_git_to_dict({})
        details['hash'] = kospex.git.current_hash
        details['observation_key'] = "GREP_TODO"
        details['observation_type'] = "FILE"
        #_repo_id,hash,file_path,observation_key
        #cmd = "grep -Rn TODO *"
        #os.system(cmd)
        #os.system("pwd")
        cmd = ['grep', '-Rn', 'TODO *']
        #result = subprocess.run(cmd, capture_output=True, text=True).stdout.split('\n')
        result  = []
        result = subprocess.run(cmd, capture_output=True, text=True).stdout.split('\n')
        for raw in result:
            obs = details.copy()
            #print(i)
            params = KrunnerUtils.extract_grep_parameters(raw)
            # We may get a None here for warnings like binary files
            if params:
                filename, line, finding = params
                #print(filename)
                obs['file_path'] = filename
                obs['line_number'] = line
                obs['data'] = finding
                obs['raw'] = raw
                print(obs)
                kospex.kospex_query.add_observation(obs)
        os.chdir(cwd)

@cli.command("git-pull")
@click.argument('directory', type=click.Path(exists=True))
def git_pull(directory):
    """Run a 'git pull' on all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    cwd = os.getcwd()
    print("# repos: " + str(len(dirs)))
    for d in dirs:
        print("\nRepo: " + d)
        os.chdir(d)
        os.system("git pull")
        os.chdir(cwd)

@cli.command("gitleaks")
@click.argument('directory', type=click.Path(exists=True))
def git_leaks(directory):
    """Run a 'gitleaks detect' on all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    cwd = os.getcwd()
    print("# repos: " + str(len(dirs)))
    for d in dirs:
        print("\nRepo: " + d)
        #os.chdir(d)
        kospex.set_repo_dir(d)
        print(kospex.git.get_repo_id())
        fname = kospex.generate_krunner_filename(function="GITLEAKS",ext="json")
        os.system(f"gitleaks detect -r {fname}")
        os.chdir(cwd)

@cli.command("deps-age")
@click.argument('directory', type=click.Path(exists=True))
def deps_age(directory):
    """Find the age of dependency files in all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    kdeps = KospexDependencies(kospex_query=kospex.kospex_query)
    cwd = os.getcwd()

    findings = []

    print("# repos: " + str(len(dirs)))
    for d in dirs:
        print("\nRepo: " + d)
        kospex.set_repo_dir(d)
        results = kdeps.find_dependency_files(".")
        if results:
            for file_path, pkg_type in results:
                dep_file = KospexUtils.get_last_commit_info(file_path)
                dep_file['type'] = pkg_type
                dep_file['file_path'] = file_path
                #print(KospexUtils.get_last_commit_info(file_path))
                findings.append(dep_file)
        os.chdir(cwd)

    print(KospexUtils.count_key_occurrences(findings, 'status'))

@cli.command("semgrep")
@click.argument('directory', type=click.Path(exists=True))
def semgrep(directory):
    """Run a 'semgrep scan' on all git repositories found in the given directory."""
    print("\nDirectory: " + os.path.abspath(directory))
    dirs = KospexUtils.find_repos(directory)
    cwd = os.getcwd()
    print("# repos: " + str(len(dirs)))
    for d in dirs:
        print("\nRepo: " + d)
        #os.chdir(d)
        kospex.set_repo_dir(d)
        print(kospex.git.get_repo_id())
        #fname = kospex.generate_krunner_filename(function="SEMGREP",ext="txt")
        fname = kospex.generate_krunner_filename(function="SEMGREP",ext="json")
        # we should output as json, but for inital test, we'll use txt
        #os.system(f"semgrep scan > {fname}")
        os.system(f"semgrep scan --json -o {fname}")
        os.chdir(cwd)

@cli.command("pretty-json")
@click.argument('json_file', type=click.Path(exists=True))
def pretty_json(json_file):
    """ Pretty print a JSON file"""
    with open(json_file, 'r') as file:
        data = json.load(file)
    pretty = json.dumps(data, indent=4)
    print(pretty)

@cli.command("test")
@click.argument('json_file', type=click.Path(exists=True))
def test(json_file):
    """ Test coding"""
    with open(json_file, 'r') as file:
        data = json.load(file)
    #for finding in data:
    #    print(finding)
    if data.get("results"):
        print("Results found")
        for r in data["results"]:
            print()
            print(json.dumps(r, indent=4))
            print()
            print(r['check_id'])
            print(r['path'])
            print(r['end']['line'])
            print(r['start']['line'])

@cli.command("semgrep-csv")
def semgrep_csv():
    """ print out sql injection findings from semgrep"""
    user_kospex_home = os.path.expanduser("~/kospex")
    print(user_kospex_home)
    globber = f"{user_kospex_home}/krunner/*SEMGREP*.json"
    print(globber)
    results = glob.glob(globber)
    csv_file = "semgrep-sql.csv"
    findings = []
    for r in results:
        base = os.path.basename(r)
        repo_id = base.split('.SEMGREP')[0]
        repo = repo_id.split('~')[-1]
        with open(r, 'r') as file:
            data = json.load(file)
        for finding in data['results']:
            if "sql" in finding['check_id']:
                #print(finding['check_id'])
                x = {}
                x['repo'] = repo
                x['path'] = finding['path']
                x['line'] = finding['start']['line']
                x['check_id'] = finding['check_id']
                #print(finding['path'] + ":" + str(finding['start']['line']) + ":" + finding['extra']['message'])
                findings.append(x)
    KospexUtils.list_dict_2_csv(findings, csv_file)

@cli.command("find-urls")
def find_urls():
    """ find all urls in files in the current directory"""
    # Define the URL pattern for grep
    # This pattern is quite basic and might need adjustments to match specific URL formats
    url_pattern = 'https?://[a-zA-Z0-9.-]+(:[0-9]+)?(/[a-zA-Z0-9._/?&=-]*)?'

    # Construct the grep command
    # -r for recursive, -E for extended regular expressions,
    # and -o to only output the matching part of the file
    # -n for the line number
    #grep_command = ['grep', '-rEon', url_pattern, "*"]

    grep_command = f'grep -rEon {url_pattern}'
    urls = None
    try:
        urls = subprocess.check_output(
                shlex.split(grep_command),
                encoding='utf-8'
            )
    except subprocess.CalledProcessError as e:
        print(e.stderr)
        print(f"Error executing grep: {e}", file=sys.stderr)
        #print(e.output.decode(), file=sys.stderr)
    #print(urls)
    lines = urls.split("\n")
    for l in lines:
        parts = KrunnerUtils.extract_grep_parameters(l)
        if parts:
            l.strip()
            filename, line_num, url = parts
            print(filename + " " + line_num + " " + url)

    # Execute the grep command
    #os.system(grep_command)

    #try:
        # Execute the grep command
    #    result = subprocess.run(grep_command, text=True, capture_output=True, check=True)
        # Print the matching lines
    #    print(result.stdout)
    #except subprocess.CalledProcessError as e:
    #    print(f"Error executing grep: {e}", file=sys.stderr)
    #    #print(e.output.decode(), file=sys.stderr)


if __name__ == '__main__':
    cli()
